/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include "keys_sv.h"
#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/outputs.h>
#include <dt-bindings/zmk/rgb.h>

// layers

#define DEFAULT 0
#define LOWER 1
#define MAGIC 2

/ {
    behaviors {
        // For the "layer" key, it'd nice to be able to use it as either a shift or a toggle.
        // Configure it as a tap dance, so the first tap (or hold) is a &mo and the second tap is a &to

        layer_td: tap_dance_0 {
            compatible = "zmk,behavior-tap-dance";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&mo 0>, <&to 0>;
        };

        ctrl_backspace: ctrl_backspace {
            compatible = "zmk,behavior-mod-morph";
            label = "CTRL_BACKSPACE";
            bindings = <&kp LC(BACKSPACE)>, <&kp BACKSPACE>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT)>;
        };

        dot_sentence_end: dot_sentence_end {
            compatible = "zmk,behavior-mod-morph";
            label = "DOT_SENTENCE_END";
            bindings = <&kp DOT>, <&sentence_end>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT)>;
        };

        backspace_nav: backspace_nav {
            compatible = "zmk,behavior-hold-tap";
            label = "BACKSPACE_NAV";
            bindings = <&mo>, <&ctrl_backspace>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            hold-trigger-key-positions = <69>;
        };
    };

    macros {
        bt_0: bt_profile_macro_0 {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&out OUT_BLE &bt BT_SEL 0>;
        };

        bt_1: bt_profile_macro_1 {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&out OUT_BLE &bt BT_SEL 1>;
        };

        bt_2: bt_profile_macro_2 {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&out OUT_BLE &bt BT_SEL 2>;
        };

        bt_3: bt_profile_macro_3 {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&out OUT_BLE &bt BT_SEL 3>;
        };

        sentence_end: sentence_end {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp DOT &kp SPACE &sk LEFT_SHIFT>;
            label = "SENTENCE_END";
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            // ---------------------------------------------------------------------------------------------------------------------------------
            // |  F1   |  F2 |  F3 |  F4  |  F5  |                                                               |  F6   |  F7   |  F8  |   F9  |  F10 |
            // |  =    |  1  |  2  |  3   |  4   |  5   |                                                 |  6   |   7   |   8   |  9   |   0   |   -  |
            // |  TAB  |  Q  |  W  |  E   |  R   |  T   |                                                 |  Y   |   U   |   I   |  O   |   P   |   \  |
            // |  ESC  |  A  |  S  |  D   |  F   |  G   |                                                 |  H   |   J   |   K   |  L   |   ;   |   '  |
            // |   `   |  Z  |  X  |  C   |  V   |  B   | LSHFT | LCTRL | LOWER | | LGUI  | RCTRL | RSHFT |  N   |   M   |   ,   |  .   |   /   | PGUP |
            // | MAGIC | HOME| END | LEFT | RIGHT|      | BSPC  | DEL   | LALT  | | RALT  | RET   | SPACE |      |  UP   | DOWN  |  [   |   ]   | PGDN |

            bindings = <
&kp F1     &kp F2        &kp F3   &kp F4    &kp F5                                                                                                                        &kp F6  &kp F9    &kp F10   &kp F11          &kp F12
&kp EQUAL  &kp NUMBER_1  &kp N2   &kp N3    &kp N4     &kp N5                                                                                          &kp N6             &kp N7  &kp N8    &kp N9    &kp N0           &kp MINUS
&kp TAB    &kp B         &kp L    &kp D     &kp W      &kp Z                                                                                           &kp SV_A_RING      &kp U   &kp I     &kp O     &kp SV_O_UMLAUT  &kp BSLH
&kp ESC    &kp N         &kp R    &kp T     &kp S      &kp G                                                                                           &kp Y              &kp H   &kp A     &kp E     &kp L            &kp COMMA
&kp GRAVE  &kp Q         &kp X    &kp M     &kp C      &kp V   &kp LSHFT           &kp LCTRL         &layer_td    &kp LGUI  &kp RCTRL       &kp RSHFT  &dot_sentence_end  &kp P   &kp J     &kp K     &kp SV_A_UMLAUT  &kp PG_UP
&mo 3      &kp HOME      &kp END  &kp LEFT  &kp RIGHT          &backspace_nav 2 0  &kp LEFT_CONTROL  &kp LALT     &kp RALT  &kp LEFT_SHIFT  &kp SPACE                     &kp UP  &kp DOWN  &kp LBKT  &kp RBKT         &kp PG_DN
            >;
        };

        SYMBOL {
            bindings = <
&trans  &trans  &trans  &trans  &trans                                                                    &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans                                                    &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans                                                    &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans                                                    &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans          &trans  &trans  &trans    &trans  &trans  &trans          &trans  &trans  &trans  &trans  &trans
            >;
        };

        NAVIGATION {
            bindings = <
&trans  &trans  &trans  &trans  &trans                                                                    &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans                                                    &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans                                                    &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans                                                    &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans          &trans  &trans  &trans    &trans  &trans  &trans          &trans  &trans  &trans  &trans  &trans
            >;
        };

        magic_layer {
            bindings = <
&bt BT_CLR   &none            &none            &none            &none                                                                                       &none  &none  &none  &none  &none
&none        &none            &none            &none            &none            &none                                                               &none  &none  &none  &none  &none  &none
&none        &rgb_ug RGB_SPI  &rgb_ug RGB_SAI  &rgb_ug RGB_HUI  &rgb_ug RGB_BRI  &rgb_ug RGB_TOG                                                     &none  &none  &none  &none  &none  &none
&bootloader  &rgb_ug RGB_SPD  &rgb_ug RGB_SAD  &rgb_ug RGB_HUD  &rgb_ug RGB_BRD  &rgb_ug RGB_EFF                                                     &none  &none  &none  &none  &none  &bootloader
&sys_reset   &none            &none            &none            &none            &none            &bt_2  &bt_3  &none           &none  &none  &none  &none  &none  &none  &none  &none  &sys_reset
&none        &none            &none            &none            &none                             &bt_0  &bt_1  &out OUT_USB    &none  &none  &none         &none  &none  &none  &none  &none
            >;
        };
    };
};
